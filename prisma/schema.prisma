// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  name          String?
  avatar        String?
  role          Role     @default(USER)
  bio           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  posts         Post[]
  files         File[]
  publications  Publication[]
  projects      ResearchProject[]

  @@map("users")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String?
  excerpt     String?
  featured    Boolean     @default(false)
  published   Boolean     @default(false)
  publishedAt DateTime?
  authorId    String
  categoryId  String?
  coverImage  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  files       File[]

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]

  @@map("categories")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  path        String
  size        Int
  mimetype    String
  uploadedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  uploadedBy  User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  posts       Post[]

  @@map("files")
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  title       String
  avatar      String?
  bio         String?
  email       String?
  phone       String?
  research    String?
  education   String?
  order       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team_members")
}

model Publication {
  id          String   @id @default(cuid())
  title       String
  abstract    String?
  authors     String
  journal     String
  year        Int
  volume      String?
  issue       String?
  pages       String?
  doi         String?
  url         String?
  pdfUrl      String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("publications")
}

model ResearchProject {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(PLANNING)
  funding     String?
  budget      Float?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("research_projects")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  SUSPENDED
}